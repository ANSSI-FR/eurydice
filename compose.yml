include:
  - compose.dev.yml

x-backend-common-envs: &backend-common-envs
  DB_NAME: ${DB_NAME:?}
  DB_USER: ${DB_USER:?}
  DB_PASSWORD: ${DB_PASSWORD:?}
  DB_PORT: 5432
  DJANGO_ENV: DEV
  DEBUG: "True"
  DJANGO_MANAGEPY_MIGRATE: "off"
  TZ: "Europe/Paris"
  SECURE_COOKIES: "false"
  USER_ASSOCIATION_TOKEN_SECRET_KEY: ${USER_ASSOCIATION_TOKEN_SECRET_KEY:?}
  GUNICORN_CONFIGURATION: ${GUNICORN_CONFIGURATION}
  EURYDICE_CONTACT: ${EURYDICE_CONTACT}
  EURYDICE_CONTACT_FR: ${EURYDICE_CONTACT_FR}
  UI_BADGE_CONTENT: ${UI_BADGE_CONTENT}
  UI_BADGE_COLOR: ${UI_BADGE_COLOR}
  LOG_TO_FILE: ${LOG_TO_FILE}
  LOG_LEVEL: ${LOG_LEVEL}
  PORT: 8080

x-backend: &backend
  build:
    context: backend
    dockerfile: docker/Dockerfile
    target: dev
  image: eurydice/backend:dev
  networks:
    - eurydice
  command:
    - make
    - run-dev
  develop:
    watch:
      - action: sync
        path: ./backend
        target: /home/eurydice/backend
        ignore:
          - .venv/
      - action: rebuild
        path: ./backend/uv.lock
      - action: rebuild
        path: ./backend/docker/Dockerfile

x-frontend: &frontend
  build:
    context: frontend
    dockerfile: docker/Dockerfile
    target: dev
  image: eurydice/frontend_dev:${EURYDICE_VERSION}
  environment:
    NODE_ENV: development
  develop:
    # Create a `watch` configuration to update the application
    # https://docs.docker.com/compose/file-watch/#compose-watch-versus-bind-mounts
    watch:
      - action: sync
        path: ./frontend
        target: /home/abc/workdir
        ignore:
          - node_modules/
      - action: rebuild
        path: ./frontend/package-lock.json
      - action: rebuild
        path: ./frontend/docker/Dockerfile

x-common-origin-envs: &common-origin-envs
  DB_HOST: db-origin
  TRANSFERABLE_STORAGE_DIR: /tmp/eurydice-data/origin/
  TRANSFERABLE_MAX_SIZE: 54975581388800

x-common-destination-envs: &common-destination-envs
  DB_HOST: db-destination
  TRANSFERABLE_STORAGE_DIR: /tmp/eurydice-data/destination/

x-common-auth-envs: &common-auth-envs
  REMOTE_USER_HEADER_AUTHENTICATION_ENABLED: ${REMOTE_USER_HEADER_AUTHENTICATION_ENABLED}

services:
  ################ Origin Services ################
  frontend-origin:
    <<: *frontend
    networks:
      - eurydice
    environment:
      VITE_EURYDICE_GUICHET: origin
    labels:
      traefik.enable: true
      traefik.http.routers.frontend_origin.rule: Host(`origin.localhost`)
      traefik.http.routers.frontend_origin.priority: 1
      traefik.http.routers.frontend_origin.service: frontend_origin_service
      traefik.http.services.frontend_origin_service.loadbalancer.server.port: 8080

  backend-origin:
    <<: *backend
    depends_on:
      db-origin:
        condition: service_started
    volumes:
      - ${PYTHON_LOGS_DIR:?}/backend-origin:/var/log/app
      - ${ORIGIN_TRANSFERABLE_STORAGE_DIR:?}:/tmp/eurydice-data/origin
    environment:
      <<: [*backend-common-envs, *common-origin-envs, *common-auth-envs]
      SECRET_KEY: ${DJANGO_SECRET_KEY:?}
      EURYDICE_API: origin
      ALLOWED_HOSTS: origin.localhost,backend-origin
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS}
      DJANGO_MANAGEPY_MIGRATE: "on"
      METRICS_SLIDING_WINDOW: ${METRICS_SLIDING_WINDOW}
      USER_ASSOCIATION_TOKEN_EXPIRES_AFTER: ${USER_ASSOCIATION_TOKEN_EXPIRES_AFTER}
      EURYDICE_TRANSFERABLE_MAX_SIZE: ${EURYDICE_TRANSFERABLE_MAX_SIZE}
    healthcheck:
      test:
        - CMD
        - /healthcheck.py
      interval: 5s
      timeout: 5s
      retries: 5
      # NOTE: in the dev image the stat period is longer because we expect
      #       the container to apply migrations on first startup
      #       (in production this should be done by a different service)
      start_period: 5s
    labels:
      traefik.enable: true
      traefik.http.routers.backend-origin.rule: Host(`origin.localhost`) && PathPrefix(`/api`, `/admin`, `/static`)
    command:
      - make
      - run-origin-api

  sender:
    <<: *backend
    depends_on:
      # NOTE: we await for the backend container to be healthy
      #       because it is the one runnning the migrations in
      #       the developement environment
      backend-origin:
        condition: service_healthy
      lidis:
        condition: service_started
    volumes:
      - ${PYTHON_LOGS_DIR:?}/sender:/var/log/app
      - ${ORIGIN_TRANSFERABLE_STORAGE_DIR:?}:/tmp/eurydice-data/origin
    extra_hosts:
      - "lidis.docker.host:host-gateway"
    environment:
      <<: [*backend-common-envs, *common-origin-envs]
      DB_HOST: db-origin
      LIDIS_HOST: lidis.docker.host
      LIDIS_PORT: ${LIDIS_PORT}
      TRANSFERABLE_HISTORY_DURATION: ${TRANSFERABLE_HISTORY_DURATION}
      TRANSFERABLE_HISTORY_SEND_EVERY: ${TRANSFERABLE_HISTORY_SEND_EVERY}
      SENDER_RANGE_FILLER_CLASS: ${SENDER_RANGE_FILLER_CLASS}
    command:
      - make
      - run-sender

  dbtrimmer-origin:
    <<: *backend
    depends_on:
      # NOTE: we await for the backend container to be healthy
      #       because it is the one runnning the migrations in
      #       the developement environment
      backend-origin:
        condition: service_healthy
    volumes:
      - ${PYTHON_LOGS_DIR:?}/dbtrimmer-origin:/var/log/app
    environment:
      <<: [*backend-common-envs, *common-origin-envs]
      DBTRIMMER_TRIM_TRANSFERABLES_AFTER: ${DBTRIMMER_TRIM_TRANSFERABLES_AFTER}
      DBTRIMMER_RUN_EVERY: ${DBTRIMMER_RUN_EVERY}
      DBTRIMMER_POLL_EVERY: ${DBTRIMMER_POLL_EVERY}
    command:
      - make
      - run-origin-dbtrimmer

  ################ Destination Services ################
  receiver:
    <<: *backend
    depends_on:
      # NOTE: we await for the backend container to be healthy
      #       because it is the one runnning the migrations in
      #       the developement environment
      backend-destination:
        condition: service_healthy
    volumes:
      - ${PYTHON_LOGS_DIR:?}/receiver:/var/log/app
      - ${DESTINATION_TRANSFERABLE_STORAGE_DIR:?}:/tmp/eurydice-data
    environment:
      <<: [*backend-common-envs, *common-destination-envs]
      PACKET_RECEIVER_HOST: "0.0.0.0"
      PACKET_RECEIVER_PORT: "7000"
      RECEIVER_BUFFER_MAX_ITEMS: "${RECEIVER_BUFFER_MAX_ITEMS}"
    ports:
      - "127.0.0.1:7000:7000"
    command:
      - make
      - run-receiver

  dbtrimmer-destination:
    <<: *backend
    depends_on:
      # NOTE: we await for the backend container to be healthy
      #       because it is the one runnning the migrations in
      #       the developement environment
      backend-destination:
        condition: service_healthy
    volumes:
      - ${PYTHON_LOGS_DIR:?}/dbtrimmer-destination:/var/log/app
      - ${DESTINATION_TRANSFERABLE_STORAGE_DIR:?}:/tmp/eurydice-data
    environment:
      <<: [*backend-common-envs, *common-destination-envs]
      DBTRIMMER_TRIM_TRANSFERABLES_AFTER: ${DBTRIMMER_TRIM_TRANSFERABLES_AFTER}
      DBTRIMMER_RUN_EVERY: ${DBTRIMMER_RUN_EVERY}
      DBTRIMMER_POLL_EVERY: ${DBTRIMMER_POLL_EVERY}
    command:
      - make
      - run-destination-dbtrimmer

  file-remover:
    <<: *backend
    depends_on:
      # NOTE: we await for the backend container to be healthy
      #       because it is the one runnning the migrations in
      #       the developement environment
      backend-destination:
        condition: service_healthy
    volumes:
      - ${PYTHON_LOGS_DIR:?}/file-remover:/var/log/app
      - ${DESTINATION_TRANSFERABLE_STORAGE_DIR:?}:/tmp/eurydice-data
    environment:
      <<: [*backend-common-envs, *common-destination-envs]
      FILE_REMOVER_EXPIRE_TRANSFERABLES_AFTER: ${FILE_REMOVER_EXPIRE_TRANSFERABLES_AFTER}
      FILE_REMOVER_RUN_EVERY: ${FILE_REMOVER_RUN_EVERY}
      FILE_REMOVER_POLL_EVERY: ${FILE_REMOVER_POLL_EVERY}
    command:
      - make
      - run-destination-file-remover

  backend-destination:
    <<: *backend
    depends_on:
      db-destination:
        condition: service_healthy
    volumes:
      - ${PYTHON_LOGS_DIR:?}/backend-destination:/var/log/app
      - ${DESTINATION_TRANSFERABLE_STORAGE_DIR:?}:/tmp/eurydice-data
    environment:
      <<: [*backend-common-envs, *common-destination-envs, *common-auth-envs]
      SECRET_KEY: "${DJANGO_SECRET_KEY:?}"
      EURYDICE_API: destination
      ALLOWED_HOSTS: destination.localhost,backend-destination
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS}
      DJANGO_MANAGEPY_MIGRATE: "on"
      METRICS_SLIDING_WINDOW: ${METRICS_SLIDING_WINDOW}
    healthcheck:
      test:
        - CMD
        - /healthcheck.py
      interval: 5s
      timeout: 5s
      retries: 5
      # NOTE: in the dev image the stat period is longer because we expect
      #       the container to apply migrations on first startup
      #       (in production this should be done by a different service)
      start_period: 5s
    labels:
      traefik.enable: true
      traefik.http.routers.backend-destination.rule: Host(`destination.localhost`) && PathPrefix(`/api`, `/admin`, `/static`)
    command:
      - make
      - run-destination-api

  frontend-destination:
    <<: *frontend
    networks:
      - eurydice
    environment:
      VITE_EURYDICE_GUICHET: destination
    labels:
      traefik.enable: true
      traefik.http.routers.frontend_destination.rule: Host(`destination.localhost`)
      traefik.http.routers.frontend_destination.priority: 1
      traefik.http.routers.frontend_destination.service: frontend_destination_service
      traefik.http.services.frontend_destination_service.loadbalancer.server.port: 8080
