x-backend-common-envs: &backend-common-envs
  DB_HOST: db
  DB_NAME: ${DB_NAME:?}
  DB_USER: ${DB_USER:?}
  DB_PASSWORD: ${DB_PASSWORD:?}
  DB_PORT: 5432
  USER_ASSOCIATION_TOKEN_SECRET_KEY: ${USER_ASSOCIATION_TOKEN_SECRET_KEY:?}
  GUNICORN_CONFIGURATION: ${GUNICORN_CONFIGURATION}
  EURYDICE_CONTACT: ${EURYDICE_CONTACT}
  EURYDICE_CONTACT_FR: ${EURYDICE_CONTACT_FR}
  UI_BADGE_CONTENT: ${UI_BADGE_CONTENT}
  UI_BADGE_COLOR: ${UI_BADGE_COLOR}
  LOG_TO_FILE: ${LOG_TO_FILE}
  LOG_LEVEL: ${LOG_LEVEL}

x-backend-common: &backend-common
  image: ${LOCAL_DOCKER_REGISTRY:-docker.io}/anssi/eurydice-backend:${EURYDICE_VERSION}
  user: ${PUID}:${PGID}
  networks:
    - eurydice
  read_only: true
  restart: always
  tmpfs:
    - /tmp
  depends_on:
    db:
      condition: service_started

x-backend: &backend
  <<: *backend-common
  cpus: ${CPUS_BACKEND}
  mem_limit: ${MEM_LIMIT_BACKEND}
  ports:
    - "${HTTP_SERVICES_BIND_HOST}:8080:8080"
  restart: always

x-dbtrimmer: &dbtrimmer
  <<: *backend-common
  cpus: ${CPUS_DBTRIMMER}
  mem_limit: ${MEM_LIMIT_DBTRIMMER}
  environment:
    <<: *backend-common-envs
    DBTRIMMER_TRIM_TRANSFERABLES_AFTER: ${DBTRIMMER_TRIM_TRANSFERABLES_AFTER}
    DBTRIMMER_RUN_EVERY: ${DBTRIMMER_RUN_EVERY}
    DBTRIMMER_POLL_EVERY: ${DBTRIMMER_POLL_EVERY}
  restart: always

x-frontend: &frontend
  image: ${LOCAL_DOCKER_REGISTRY:-docker.io}/anssi/eurydice-frontend:${EURYDICE_VERSION}
  user: ${PUID}:${PGID}
  cpus: ${CPUS_FRONTEND}
  mem_limit: ${MEM_LIMIT_FRONTEND}
  ports:
    - "${HTTP_SERVICES_BIND_HOST}:8888:8080"
  networks:
    - eurydice
  read_only: true
  tmpfs:
    - /tmp:uid=${PUID},gid=${PGID},mode=700
    - /var/cache/nginx:uid=${PUID},gid=${PGID},mode=700
    - /etc/nginx/conf.d:uid=${PUID},gid=${PGID},mode=700
  restart: always

x-filebeat: &filebeat
  image: ${REMOTE_DOCKER_REGISTRY}/elastic/filebeat:${ELK_VERSION}
  user: ${PUID}:${PGID}
  cpus: ${CPUS_FILEBEAT}
  mem_limit: ${MEM_LIMIT_FILEBEAT}
  read_only: true
  networks:
    - eurydice
  restart: always
  environment:
    ELASTICSEARCH_API_KEY: ${ELASTICSEARCH_API_KEY}
    ELASTICSEARCH_HOSTS: ${ELASTICSEARCH_HOSTS}
  command:
    - filebeat
    - run
    - --strict.perms=false
    - -e
  healthcheck:
    test:
      - CMD
      - test
      - output
    interval: 10s
    timeout: 5s
    retries: 5
    start_period: 5s

services:
  ############# Common services #############
  db:
    image: ${REMOTE_DOCKER_REGISTRY}/postgres:15
    read_only: true
    shm_size: ${SHM_SIZE_DATABASE}
    cpus: ${CPUS_DATABASE}
    mem_limit: ${MEM_LIMIT_DATABASE}
    networks:
      - eurydice
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME:?}
      POSTGRES_USER: ${DB_USER:?}
      POSTGRES_PASSWORD: ${DB_PASSWORD:?}
    user: ${PUID}:${PGID}
    tmpfs:
      - /tmp:mode=770,uid=${PUID},gid=${PGID}
      - /run:mode=770,uid=${PUID},gid=${PGID}
    volumes:
      - ${DB_DATA_DIR:?}:/var/lib/postgresql/data
      - ${DB_LOGS_DIR:?}:/var/log/postgresql
    command:
      - "postgres"
      - "-c" # turn on csv logging
      - "logging_collector=on"
      - "-c"
      - "log_destination=csvlog"
      - "-c"
      - "log_directory=/var/log/postgresql"
      - "-c" # filebeat format
      - "log_line_prefix=%m [%p] %q%u@%d "
      - "-c" # turn on hour-based log rotation
      - "log_truncate_on_rotation=on"
      - "-c"
      - "log_filename=postgresql-%H.log"
      - "-c"
      - "log_rotation_age=60"
      - "-c"
      - "log_file_mode=0644"
      - "-c" # print statements that took more than 200ms...
      - "log_min_duration_statement=200"
      - "-c" # ...do not print other statements...
      - "log_statement=none"
      - "-c" # ...do not even print the duration of these other statements
      - "log_duration=off"
    healthcheck:
      test:
        - CMD-SHELL
        - psql -U ${DB_USER:?} -lqtA | grep -q "^${DB_NAME:?}|"
      interval: 5s
      timeout: 5s
      retries: 5

  ############# Origin services #############
  frontend-origin:
    <<: *frontend
    profiles:
      - origin
      - origin-with-elk-logging
    environment:
      NGINX_SERVER_NAME: ${FRONTEND_HOSTNAMES:?}
      NGINX_ROOT_DIR: origin

  filebeat-origin:
    <<: *filebeat
    profiles:
      - origin-with-elk-logging
    volumes:
      - "${FILEBEAT_CONFIG_PATH:?}:/usr/share/filebeat/filebeat.yml:ro"
      - "${FILEBEAT_LOGS_DIR:?}:/usr/share/filebeat/logs"
      - "${FILEBEAT_DATA_DIR:?}:/usr/share/filebeat/data"
      - "${ELASTICSEARCH_CERT_PATH:?}:/usr/share/elasticsearch/config/certs/cert.crt:ro"
      - "${DB_LOGS_DIR:?}:/logs/origin/postgresql:ro"
      - "${PYTHON_LOGS_DIR:?}/backend-origin:/logs/origin/backend:ro"
      - "${PYTHON_LOGS_DIR:?}/sender:/logs/origin/sender:ro"
      - "${PYTHON_LOGS_DIR:?}/dbtrimmer-origin:/logs/origin/dbtrimmer:ro"
      - "${PYTHON_LOGS_DIR:?}/db-migrations-origin:/logs/origin/db-migrations:ro"

  backend-origin: &backend-origin
    <<: *backend
    profiles:
      - origin
    volumes:
      - "${PYTHON_LOGS_DIR:?}/backend-origin:/var/log/app"
      - "${HOST_TRANSFERABLE_STORAGE_DIR:?}:/home/eurydice/data"
    environment:
      <<: *backend-common-envs
      SECRET_KEY: ${DJANGO_SECRET_KEY:?}
      ALLOWED_HOSTS: ${BACKEND_HOSTNAMES:?}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS}
      EURYDICE_API: origin
      USER_ASSOCIATION_TOKEN_EXPIRES_AFTER: ${USER_ASSOCIATION_TOKEN_EXPIRES_AFTER}
      REMOTE_USER_HEADER_AUTHENTICATION_ENABLED: ${REMOTE_USER_HEADER_AUTHENTICATION_ENABLED}
      REMOTE_USER_HEADER: ${REMOTE_USER_HEADER}
      METRICS_SLIDING_WINDOW: ${METRICS_SLIDING_WINDOW}
      TRANSFERABLE_MAX_SIZE: ${EURYDICE_TRANSFERABLE_MAX_SIZE}
    command:
      - make
      - run-origin-api
    healthcheck:
      test:
        - CMD
        - /healthcheck.py
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 1s

  backend-origin-with-elk:
    <<: *backend-origin
    profiles:
      - origin-with-elk-logging
    depends_on:
      filebeat-origin:
        condition: service_healthy

  dbtrimmer-origin: &dbtrimmer-origin
    <<: *dbtrimmer
    volumes:
      - "${PYTHON_LOGS_DIR:?}/dbtrimmer-origin:/var/log/app"
    profiles:
      - origin
    command:
      - make
      - run-origin-dbtrimmer

  dbtrimmer-origin-with-elk:
    <<: *dbtrimmer-origin
    profiles:
      - origin-with-elk-logging
    depends_on:
      filebeat-origin:
        condition: service_healthy
  sender: &sender
    <<: *backend-common
    profiles:
      - origin
    cpus: ${CPUS_SENDER}
    mem_limit: ${MEM_LIMIT_SENDER}
    volumes:
      - "${PYTHON_LOGS_DIR:?}/sender:/var/log/app"
      - "${HOST_TRANSFERABLE_STORAGE_DIR:?}:/home/eurydice/data"
    extra_hosts:
      - "lidis.docker.host:host-gateway"
    environment:
      <<: *backend-common-envs
      LIDIS_HOST: lidis.docker.host
      LIDIS_PORT: ${LIDIS_PORT}
      TRANSFERABLE_HISTORY_DURATION: ${TRANSFERABLE_HISTORY_DURATION}
      TRANSFERABLE_HISTORY_SEND_EVERY: ${TRANSFERABLE_HISTORY_SEND_EVERY}
      SENDER_RANGE_FILLER_CLASS: ${SENDER_RANGE_FILLER_CLASS}
    restart: always
    depends_on:
      db:
        condition: service_healthy
      lidis:
        condition: service_started
    command:
      - make
      - run-sender

  sender-with-elk:
    <<: *sender
    profiles:
      - origin-with-elk-logging
    depends_on:
      db:
        condition: service_healthy
      lidis:
        condition: service_started
      filebeat-origin:
        condition: service_healthy

  lidis:
    profiles:
      - origin
      - origin-with-elk-logging
    image: ${LOCAL_DOCKER_REGISTRY:-docker.io}/anssi/lidi-send:${LIDI_VERSION}
    cpus: ${CPUS_LIDIS}
    mem_limit: ${MEM_LIMIT_LIDIS}
    read_only: true
    network_mode: "host"
    environment:
      RUST_LOG: ${RUST_LOG}
    restart: always
    command:
      - "--from_tcp"
      - "0.0.0.0:${LIDIS_PORT}"
      - "--to_udp"
      - "0.0.0.0:${LIDIR_PORT}"
      - "--to_udp_mtu"
      - "${LIDI_UDP_MTU}"
      - "--nb_clients"
      - "1"
      - "--encoding_block_size"
      - "${LIDI_ENCODING_BLOCK_SIZE}"
      - "--repair_block_size"
      - "${LIDI_REPAIR_BLOCK_SIZE}"
      - "--nb_encoding_threads"
      - "${LIDIS_NB_ENCODING_THREADS}"
      - "--bandwidth_limit"
      - "${LIDI_BANDWIDTH_LIMIT}"

  ############# Origin tools #############
  db-migrations-origin: &db-migrations-origin
    profiles:
      - migration-origin
    <<: *backend
    volumes:
      - "${PYTHON_LOGS_DIR:?}/db-migrations-origin:/var/log/app"
    environment:
      <<: *backend-common-envs
      SECRET_KEY: ${DJANGO_SECRET_KEY:?}
      ALLOWED_HOSTS: ${BACKEND_HOSTNAMES:?}
      EURYDICE_API: origin
    command:
      - make
      - migrate
    depends_on:
      db:
        condition: service_healthy

  db-migrations-origin-with-elk:
    profiles:
      - migration-origin-with-elk-logging
    <<: *db-migrations-origin
    depends_on:
      db:
        condition: service_healthy
      filebeat-origin:
        condition: service_healthy

  ############# Destination services #############
  lidir: &lidir
    profiles:
      - destination
    image: ${LOCAL_DOCKER_REGISTRY:-docker.io}/anssi/lidi-receive:${LIDI_VERSION:-latest}
    depends_on:
      receiver:
        condition: service_started
    cpus: ${CPUS_LIDIR}
    mem_limit: ${MEM_LIMIT_LIDIR}
    read_only: true
    network_mode: "host"
    environment:
      RUST_LOG: ${RUST_LOG}
    restart: always
    command:
      - "--from_udp"
      - "0.0.0.0:${LIDIR_PORT}"
      - "--from_udp_mtu"
      - "${LIDI_UDP_MTU}"
      - "--to_tcp"
      - "127.0.0.1:65432"
      - "--encoding_block_size"
      - "${LIDI_ENCODING_BLOCK_SIZE}"
      - "--repair_block_size"
      - "${LIDI_REPAIR_BLOCK_SIZE}"
      - "--nb_clients"
      - "1"
      - "--nb_decoding_threads"
      - "${LIDIR_NB_DECODING_THREADS}"
      - "--bandwidth_limit"
      - "${LIDI_BANDWIDTH_LIMIT}"

  lidir-with-elk:
    <<: *lidir
    profiles:
      - destination-with-elk-logging
    depends_on:
      receiver-with-elk:
        condition: service_started

  receiver: &receiver
    profiles:
      - destination
    <<: *backend-common
    volumes:
      - "${PYTHON_LOGS_DIR:?}/receiver:/var/log/app"
      - "${HOST_TRANSFERABLE_STORAGE_DIR:?}:/home/eurydice/data"
    cpus: ${CPUS_RECEIVER}
    mem_limit: ${MEM_LIMIT_RECEIVER}
    environment:
      <<: *backend-common-envs
      PACKET_RECEIVER_HOST: "0.0.0.0"
      PACKET_RECEIVER_PORT: "65432"
      RECEIVER_BUFFER_MAX_ITEMS: "${RECEIVER_BUFFER_MAX_ITEMS}"
    restart: always
    ports:
      - "127.0.0.1:65432:65432"
    command:
      - make
      - run-receiver

  receiver-with-elk:
    profiles:
      - destination-with-elk-logging
    <<: *receiver
    depends_on:
      filebeat-destination:
        condition: service_healthy

  backend-destination: &backend-destination
    profiles:
      - destination
    <<: *backend
    volumes:
      - "${PYTHON_LOGS_DIR:?}/backend-destination:/var/log/app"
      - "${HOST_TRANSFERABLE_STORAGE_DIR:?}:/home/eurydice/data"
    environment:
      <<: *backend-common-envs
      SECRET_KEY: ${DJANGO_SECRET_KEY:?}
      ALLOWED_HOSTS: ${BACKEND_HOSTNAMES:?}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS}
      EURYDICE_API: destination
      REMOTE_USER_HEADER_AUTHENTICATION_ENABLED: ${REMOTE_USER_HEADER_AUTHENTICATION_ENABLED}
      REMOTE_USER_HEADER: ${REMOTE_USER_HEADER}
      METRICS_SLIDING_WINDOW: ${METRICS_SLIDING_WINDOW}
    command:
      - make
      - run-destination-api
    healthcheck:
      test:
        - CMD
        - /healthcheck.py
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 1s

  backend-destination-with-elk:
    profiles:
      - destination-with-elk-logging
    <<: *backend-destination
    depends_on:
      filebeat-destination:
        condition: service_healthy

  frontend-destination:
    <<: *frontend
    profiles:
      - destination
      - destination-with-elk-logging
    environment:
      NGINX_SERVER_NAME: ${FRONTEND_HOSTNAMES:?}
      NGINX_ROOT_DIR: destination

  filebeat-destination:
    <<: *filebeat
    profiles:
      - destination-with-elk-logging
    volumes:
      - "${FILEBEAT_CONFIG_PATH:?}:/usr/share/filebeat/filebeat.yml:ro"
      - "${FILEBEAT_LOGS_DIR:?}:/usr/share/filebeat/logs:ro"
      - "${FILEBEAT_DATA_DIR:?}:/usr/share/filebeat/data"
      - "${ELASTICSEARCH_CERT_PATH:?}:/usr/share/elasticsearch/config/certs/cert.crt:ro"
      - "${DB_LOGS_DIR:?}:/logs/destination/postgresql:ro"
      - "${PYTHON_LOGS_DIR:?}/backend-destination:/logs/destination/backend:ro"
      - "${PYTHON_LOGS_DIR:?}/receiver:/logs/destination/receiver:ro"
      - "${PYTHON_LOGS_DIR:?}/dbtrimmer-destination:/logs/destination/dbtrimmer:ro"
      - "${PYTHON_LOGS_DIR:?}/file_remover:/logs/destination/file_remover:ro"
      - "${PYTHON_LOGS_DIR:?}/db-migrations-destination:/logs/destination/db-migrations:ro"

  dbtrimmer-destination: &dbtrimmer-destination
    profiles:
      - destination
    <<: *dbtrimmer
    volumes:
      - "${PYTHON_LOGS_DIR:?}/dbtrimmer-destination:/var/log/app"
    command:
      - make
      - run-destination-dbtrimmer

  dbtrimmer-destination-with-elk:
    profiles:
      - destination-with-elk-logging
    <<: *dbtrimmer-destination
    depends_on:
      filebeat-destination:
        condition: service_healthy

  file-remover: &file-remover
    profiles:
      - destination
    <<: *backend-common
    volumes:
      - "${PYTHON_LOGS_DIR:?}/file_remover:/var/log/app"
      - "${HOST_TRANSFERABLE_STORAGE_DIR:?}:/home/eurydice/data"
    cpus: ${CPUS_FILE_REMOVER}
    mem_limit: ${MEM_LIMIT_FILE_REMOVER}
    environment:
      <<: *backend-common-envs
      FILE_REMOVER_EXPIRE_TRANSFERABLES_AFTER: ${FILE_REMOVER_EXPIRE_TRANSFERABLES_AFTER}
      FILE_REMOVER_RUN_EVERY: ${FILE_REMOVER_RUN_EVERY}
      FILE_REMOVER_POLL_EVERY: ${FILE_REMOVER_POLL_EVERY}
    restart: always
    command:
      - make
      - run-destination-file-remover

  file-remover-with-elk:
    profiles:
      - destination-with-elk-logging
    <<: *file-remover
    depends_on:
      filebeat-destination:
        condition: service_healthy

  ############# Destination tools #############
  db-migrations-destination: &db-migrations-destination
    profiles:
      - migration-destination
    <<: *backend
    volumes:
      - "${PYTHON_LOGS_DIR:?}/db-migrations-destination:/var/log/app"
    environment:
      <<: *backend-common-envs
      SECRET_KEY: ${DJANGO_SECRET_KEY:?}
      ALLOWED_HOSTS: ${BACKEND_HOSTNAMES:?}
      EURYDICE_API: destination
    command:
      - make
      - migrate
    depends_on:
      db:
        condition: service_healthy

  db-migrations-destination-with-elk:
    profiles:
      - migration-destination-with-elk-logging
    <<: *db-migrations-destination
    depends_on:
      db:
        condition: service_healthy
      filebeat-destination:
        condition: service_healthy

networks:
  eurydice:
    driver: bridge
    name: eurydice
    ipam:
      config:
        - subnet: ${EURYDICE_IPV4_SUBNET}
