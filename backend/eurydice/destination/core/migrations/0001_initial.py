# Generated by Django 3.2 on 2021-05-05 14:14

import uuid

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.db.models.expressions
import django.utils.timezone
from django.conf import settings
from django.db import migrations
from django.db import models

import eurydice.common.models.fields


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "associated_user_profile_id",
                    models.UUIDField(
                        help_text="The UUID of the user profile on the origin side that is associated with the user profile on this side",
                        null=True,
                        unique=True,
                        verbose_name="Associated user profile ID",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "eurydice_user_profiles",
            },
        ),
        migrations.CreateModel(
            name="IncomingTransferable",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    eurydice.common.models.fields.TransferableNameField(
                        help_text="The name of the file corresponding to the Transferable",
                        max_length=255,
                        validators=[django.core.validators.MinLengthValidator(1)],
                        verbose_name="Name",
                    ),
                ),
                (
                    "sha1",
                    eurydice.common.models.fields.SHA1Field(
                        help_text="The SHA-1 digest of the file corresponding to the Transferable",
                        max_length=20,
                        validators=[django.core.validators.MinLengthValidator(20)],
                        verbose_name="SHA-1",
                    ),
                ),
                (
                    "size",
                    eurydice.common.models.fields.TransferableSizeField(
                        help_text="The size in bytes of the file corresponding to the Transferable",
                        validators=[
                            django.core.validators.MaxValueValidator(5497558138880)
                        ],
                        verbose_name="Size in bytes",
                    ),
                ),
                (
                    "s3_bucket_name",
                    eurydice.common.models.fields.S3BucketNameField(
                        help_text="The name of the S3 bucket containing the file corresponding to this IncomingTransferable",
                        max_length=63,
                        validators=[django.core.validators.MinLengthValidator(3)],
                        verbose_name="S3 bucket name",
                    ),
                ),
                (
                    "s3_object_name",
                    eurydice.common.models.fields.S3ObjectNameField(
                        help_text="The name of the S3 object holding the data corresponding to this IncomingTransferable",
                        max_length=255,
                        validators=[django.core.validators.MinLengthValidator(1)],
                        verbose_name="S3 object name",
                    ),
                ),
                (
                    "user_provided_meta",
                    eurydice.common.models.fields.UserProvidedMetaField(
                        default=dict,
                        help_text="The metadata provided by the user on file submission",
                        verbose_name="User provided metadata",
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("ONGOING", "Ongoing"),
                            ("SUCCESS", "Success"),
                            ("ERROR", "Error"),
                            ("EXPIRED", "Expired"),
                        ],
                        default="ONGOING",
                        help_text="The state of the IncomingTransferable",
                        max_length=7,
                        verbose_name="State",
                    ),
                ),
                (
                    "finished_at",
                    models.DateTimeField(
                        help_text="A timestamp indicating the end of the reception of the IncomingTransferable",
                        null=True,
                        verbose_name="Transfer finish date",
                    ),
                ),
                (
                    "user_profile",
                    models.ForeignKey(
                        help_text="The profile of the user owning the Transferable",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="eurydice_destination_core.userprofile",
                        verbose_name="User profile",
                    ),
                ),
            ],
            options={
                "db_table": "eurydice_incoming_transferables",
            },
        ),
        migrations.AddConstraint(
            model_name="userprofile",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("associated_user_profile_id__isnull", True),
                    ("user__isnull", True),
                    _negated=True,
                ),
                name="eurydice_destination_core_userprofile_user_associated_user_profile_id",
            ),
        ),
        migrations.AddConstraint(
            model_name="incomingtransferable",
            constraint=models.UniqueConstraint(
                fields=("s3_bucket_name", "s3_object_name"),
                name="eurydice_destination_core_incomingtransferable_s3_bucket_name_s3_object_name",
            ),
        ),
        migrations.AddConstraint(
            model_name="incomingtransferable",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("finished_at__isnull", True), ("state", "ONGOING")),
                    models.Q(
                        ("finished_at__isnull", False),
                        ("state__in", ("SUCCESS", "ERROR", "EXPIRED")),
                    ),
                    _connector="OR",
                ),
                name="eurydice_destination_core_incomingtransferable_finished_at_state",
            ),
        ),
        migrations.AddConstraint(
            model_name="incomingtransferable",
            constraint=models.CheckConstraint(
                check=models.Q(
                    finished_at__gte=django.db.models.expressions.F("created_at")
                ),
                name="eurydice_destination_core_incomingtransferable_finished_at_created_at",
            ),
        ),
    ]
