from typing import Any
from typing import Dict
from typing import Tuple

from django.db import models


class SubqueryLeftOuterJoin:
    """
    The SubqueryLeftOuterJoin class is a rewrite of the Join class that can be found
    in `django.db.models.sql.datastructures.Join`.

    It allows to join on a subquery instead of an existing table (which is the default
    Join class behavior).

    The SQL generated by SubqueryLeftOuterJoin is in the following format:
        LEFT OUTER JOIN (SELECT ...) "t2" ON ("main_table"."t2_id" = "t2"."id")

    This class does not implement advanced features such as:
    - automatic alias name creation,
    - relabeled cloning,
    - advanced join filtering clauses.
    """

    def __init__(
        self,
        subquery: models.QuerySet,
        subquery_alias: str,
        join_field_name_in_parent: str,
        join_field_in_subquery: models.F,
    ) -> None:
        self.subquery_sql, self.subquery_params = subquery.query.sql_with_params()
        self.subquery_alias = subquery_alias
        self.join_field_in_parent = join_field_name_in_parent
        self.join_field_in_subquery = join_field_in_subquery.name

        self.table_alias = "subquery"
        self.table_name = "subquery"
        self.parent_alias = subquery.model._meta.db_table
        self.join_type = "LEFT JOIN"
        self.nullable = True
        self.filtered_relation = None

    def as_sql(self, compiler: Any, connection: Any) -> Tuple[str, Tuple]:
        """
        Generates the full SQL for this join.

        This method is essentially a stripped down version of the `as_sql` method
        that can be found in `django.db.models.sql.datastructures.Join`.
        """

        format_table_name = compiler.quote_name_unless_alias
        format_column_name = connection.ops.quote_name

        sql = (
            f"{self.join_type} ({self.subquery_sql}) {self.subquery_alias}"
            f" ON ("
            f"{format_table_name(self.parent_alias)}"
            f".{format_column_name(self.join_field_in_parent)}"
            f" = "
            f"{format_table_name(self.table_alias)}"
            f".{format_column_name(self.join_field_in_subquery)}"
            f")"
        )

        return sql, self.subquery_params


def make_queryset_with_subquery_join(
    queryset: models.QuerySet,
    subquery: models.QuerySet,
    on: models.Q,
    select: Dict[str, str],
    subquery_alias: str = "subqueryjoin",
) -> models.QuerySet:
    """
    Enrich a given queryset by LEFT OUTER JOINing it with another queryset.

    The `on` argument specifies on which fields the join should be performed :
        `on=Q(field_in_parent_queryset=F("field_in_subquery"))`

    The `select` dict acts as an annotation mapping: keys will be the names of
    annotated attributes added to the queryset elements, and values are the fields
    to select from the subquery to build those attributes.

    Args:
        queryset: the parent queryset (main SQL query)
        subquery: the queryset to join to the parent (SQL subquery)
        on: join fields expression
        select: extra fields from the subquery to select in the parent query
        subquery_alias: when chaining multiple querysets, must be unique at each call

    Returns:
        The parent queryset, enriched with the LEFT OUTER JOIN

    """

    # Include selected fields in the SELECT clause
    queryset = queryset.extra(  # nosec
        select={
            parent_field: f"{subquery_alias}.{subquery_field}"
            for parent_field, subquery_field in select.items()
        }
    )

    # Perform the join using the internal Django query builder
    join = SubqueryLeftOuterJoin(
        subquery,
        subquery_alias,
        *(on.deconstruct()[1][0]),
    )

    queryset.query.join(join)  # type: ignore
    join.table_alias = subquery_alias
    queryset.query.external_aliases[subquery_alias] = True  # type: ignore

    return queryset
